# User          - 01
# Matching      - 02
# Question      - 03
# Socket        - 04

version: "3"
services:
  user:
    container_name: user-service
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    ports:
      - "5001:5000"
    environment:
      - PORT=5000
      - NODE_ENV=production
    env_file:
      - ./services/user-service/.env
    depends_on:
      postgres_user_service:
        condition: service_healthy
    networks:
      - user-service-network
      - api-network

  postgres_user_service:
    image: postgres:latest
    container_name: postgres-user-service
    volumes:
      - progresDB:/data/postgres/user-service
    env_file:
      - ./services/user-service/.env
    networks:
      - user-service-network
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U admin -d postgres'"]
      interval: 10s
      timeout: 3s
      retries: 3

  matching:
    container_name: matching-service
    build:
      context: ./services/matching-service
      dockerfile: Dockerfile
    ports:
      - "5002:5000"
    environment:
      - PORT=5000
      - NODE_ENV=production
    env_file:
      - ./services/matching-service/.env
    depends_on:
      postgres_matching_service:
        condition: service_healthy
    networks:
      - matching-service-network
      - api-network

  postgres_matching_service:
    image: postgres:latest
    container_name: postgres-matching-service
    volumes:
      - progresDB:/data/postgres/matching-service
    env_file:
      - ./services/matching-service/.env
    networks:
      - matching-service-network
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U admin -d postgres'"]
      interval: 10s
      timeout: 3s
      retries: 3

  question:
    container_name: question-service
    build:
      context: ./services/question-service
      dockerfile: Dockerfile
    ports:
      - "5003:5000"
    environment:
      - PORT=5000
      - NODE_ENV=production
    env_file:
      - ./services/question-service/.env
    depends_on:
      postgres_question_service:
        condition: service_healthy
    networks:
      - question-service-network
      - api-network

  postgres_question_service:
    image: postgres:latest
    container_name: postgres-question-service
    volumes:
      - progresDB:/data/postgres/question-service
    env_file:
      - ./services/question-service/.env
    networks:
      - question-service-network
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U admin -d postgres'"]
      interval: 10s
      timeout: 3s
      retries: 3

  socket:
    container_name: socket-service
    build:
      context: ./services/socket-service
      dockerfile: Dockerfile
    ports:
      - "5004:5000"
    environment:
      - PORT=5000
      - NODE_ENV=production
    env_file:
      - ./services/socket-service/.env
    networks:
      - socket-service-network
      - api-network

  client:
    container_name: client
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "3000:3000"

networks:
  user-service-network:
    driver: bridge

  matching-service-network:
    driver: bridge

  question-service-network:
    driver: bridge

  socket-service-network:
    driver: bridge

  client-network:
    driver: bridge

  api-network:
    driver: bridge

volumes:
  progresDB:
