version: "3"
services:
  user:
    container_name: user-service
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile.staging
    ports:
      - "5001:5000"
    environment:
      - PORT=5000
      - NODE_ENV=production
    env_file:
      - ./backend/user-service/.env
    depends_on:
      postgres_user_service:
        condition: service_healthy
    networks:
      - user-service-network
      - api-network
  postgres_user_service:
    image: "postgres:latest"
    container_name: postgres-user-service
    volumes:
      - "progresDB:/data/postgres/user-service"
    env_file:
      - ./backend/user-service/.env
    networks:
      - user-service-network
    healthcheck:
      test:
        - CMD-SHELL
        - sh -c 'pg_isready -U admin -d postgres'
      interval: 10s
      timeout: 3s
      retries: 3
  matching:
    container_name: matching-service
    build:
      context: ./backend/matching-service
      dockerfile: Dockerfile.staging
    ports:
      - "5002:5000"
    environment:
      - PORT=5000
      - NODE_ENV=production
    env_file:
      - ./backend/matching-service/.env
    depends_on:
      postgres_matching_service:
        condition: service_healthy
    networks:
      - matching-service-network
      - api-network
  postgres_matching_service:
    image: "postgres:latest"
    container_name: postgres-matching-service
    volumes:
      - "progresDB:/data/postgres/matching-service"
    env_file:
      - ./backend/matching-service/.env
    networks:
      - matching-service-network
    healthcheck:
      test:
        - CMD-SHELL
        - sh -c 'pg_isready -U admin -d postgres'
      interval: 10s
      timeout: 3s
      retries: 3
  question:
    container_name: question-service
    build:
      context: ./backend/question-service
      dockerfile: Dockerfile.staging
    ports:
      - "5003:5000"
    environment:
      - PORT=5000
      - NODE_ENV=production
    env_file:
      - ./backend/question-service/.env
    depends_on:
      postgres_question_service:
        condition: service_healthy
    networks:
      - question-service-network
      - api-network
  postgres_question_service:
    image: "postgres:latest"
    container_name: postgres-question-service
    volumes:
      - "progresDB:/data/postgres/question-service"
    env_file:
      - ./backend/question-service/.env
    networks:
      - question-service-network
    healthcheck:
      test:
        - CMD-SHELL
        - sh -c 'pg_isready -U admin -d postgres'
      interval: 10s
      timeout: 3s
      retries: 3
  history:
    container_name: history-service
    build:
      context: ./backend/history-service
      dockerfile: Dockerfile.staging
    ports:
      - "5007:5000"
    environment:
      - PORT=5000
      - NODE_ENV=production
    env_file:
      - ./backend/history-service/.env
    depends_on:
      postgres_history_service:
        condition: service_healthy
    networks:
      - history-service-network
      - api-network
  postgres_history_service:
    image: "postgres:latest"
    container_name: postgres-history-service
    volumes:
      - "progresDB:/data/postgres/history-service"
    env_file:
      - ./backend/history-service/.env
    networks:
      - history-service-network
    healthcheck:
      test:
        - CMD-SHELL
        - sh -c 'pg_isready'
      interval: 15s
      timeout: 15s
      start_period: 90s
      retries: 3
  collaboration:
    container_name: collaboration-service
    build:
      context: ./backend/collaboration-service
      dockerfile: Dockerfile.staging
    ports:
      - "5004:5000"
    environment:
      - PORT=5000
      - NODE_ENV=production
    env_file:
      - ./backend/collaboration-service/.env
    networks:
      - collaboration-service-network
      - api-network
  chat:
    container_name: chat-service
    build:
      context: ./backend/chat-service
      dockerfile: Dockerfile.dev
    ports:
      - "9000:9000"
    environment:
      - PORT=9000
    env_file:
      - ./backend/chat-service/.env
    networks:
      - chat-service-network
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile.staging
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
    env_file:
      - ./frontend/.env
    networks:
      - chat-service-network
      - api-network

networks:
  chat-service-network:
    driver: bridge
  user-service-network:
    driver: bridge
  matching-service-network:
    driver: bridge
  question-service-network:
    driver: bridge
  collaboration-service-network:
    driver: bridge
  history-service-network:
    driver: bridge
  api-network:
    driver: bridge
volumes:
  progresDB: null
