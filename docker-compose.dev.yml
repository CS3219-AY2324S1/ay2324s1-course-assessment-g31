# User          - 01
# Matching      - 02
# Question      - 03
# Collaboration        - 04

version: "3"
services:
  chat:
    container_name: chat-service
    build:
      context: ./backend/chat-service
      dockerfile: Dockerfile.dev
    ports:
      - "9000:9000"
    environment:
      - PORT=9000
    env_file:
      - ./backend/chat-service/.env
    depends_on:
      broker:
        condition: service_healthy
    networks:
      - chat-service-network
      - api-network
      - kafka-network

  user:
    container_name: user-service
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile
    ports:
      - "5001:5000"
    environment:
      - PORT=5000
    env_file:
      - ./backend/user-service/.env
    depends_on:
      postgres_user_service:
        condition: service_healthy
      broker:
        condition: service_healthy
    networks:
      - user-service-network
      - api-network
      - kafka-network
  user2:
    container_name: user-service2
    build:
      context: ./backend/user-service2
      dockerfile: Dockerfile
    ports:
      - "5008:5000"
    environment:
      - PORT=5000
    env_file:
      - ./backend/user-service2/.env
    depends_on:
      postgres_user_service:
        condition: service_healthy
      broker:
        condition: service_healthy
    networks:
      - user-service-network
      - api-network
      - kafka-network

  postgres_user_service:
    image: postgres:latest
    container_name: postgres-user-service
    volumes:
      - progresDB:/data/postgres/user-service
    env_file:
      - ./backend/user-service2/.env
    networks:
      - user-service-network
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U admin -d postgres'"]
      interval: 10s
      timeout: 3s
      retries: 3

  matching:
    container_name: matching-service
    build:
      context: ./backend/matching-service
      dockerfile: Dockerfile.dev
    ports:
      - "5002:5000"
    environment:
      - PORT=5000
    env_file:
      - ./backend/matching-service/.env
    depends_on:
      postgres_matching_service:
        condition: service_healthy
      broker:
        condition: service_healthy
    networks:
      - matching-service-network
      - api-network
      - kafka-network

  postgres_matching_service:
    image: postgres:latest
    container_name: postgres-matching-service
    volumes:
      - progresDB:/data/postgres/matching-service
    env_file:
      - ./backend/matching-service/.env
    networks:
      - matching-service-network
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U admin -d postgres'"]
      interval: 10s
      timeout: 3s
      retries: 3

  question:
    container_name: question-service
    build:
      context: ./backend/question-service
      dockerfile: Dockerfile.dev
    ports:
      - "5003:5000"
    environment:
      - PORT=5000
    env_file:
      - ./backend/question-service/.env
    depends_on:
      postgres_question_service:
        condition: service_healthy
      broker:
        condition: service_healthy
    networks:
      - question-service-network
      - api-network
      - kafka-network

  question2:
    container_name: question-service2
    build:
      context: ./backend/question-service2
      dockerfile: Dockerfile
    ports:
      - "5003:5000"
    environment:
      - PORT=5000
    env_file:
      - ./backend/question-service2/.env
    depends_on:
      postgres_question_service:
        condition: service_healthy
      broker:
        condition: service_healthy
    networks:
      - question-service-network
      - api-network
      - kafka-network

  postgres_question_service:
    image: postgres:latest
    container_name: postgres-question-service
    volumes:
      - progresDB:/data/postgres/question-service
    env_file:
      - ./backend/question-service/.env
    networks:
      - question-service-network
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U admin -d postgres'"]
      interval: 10s
      timeout: 3s
      retries: 3

  history:
    container_name: history-service
    build:
      context: ./backend/history-service
      dockerfile: Dockerfile.dev
    ports:
      - "5007:5000"
    environment:
      - PORT=5000
    env_file:
      - ./backend/history-service/.env
    depends_on:
      postgres_history_service:
        condition: service_healthy
      broker:
        condition: service_healthy
    networks:
      - history-service-network
      - api-network
      - kafka-network

  postgres_history_service:
    image: postgres:latest
    container_name: postgres-history-service
    volumes:
      - progresDB:/data/postgres/history-service
    env_file:
      - ./backend/history-service/.env
    networks:
      - history-service-network
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready'"]
      interval: 15s
      timeout: 15s
      start_period: 90s
      retries: 3

  collaboration:
    container_name: collaboration-service
    build:
      context: ./backend/collaboration-service
      dockerfile: Dockerfile.dev
    ports:
      - "5004:5000"
    environment:
      - PORT=5000
    env_file:
      - ./backend/collaboration-service/.env
    depends_on:
      broker:
        condition: service_healthy
    networks:
      - collaboration-service-network
      - api-network
      - kafka-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    ports:
      - "2181:2181"
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 15s
      timeout: 15s
      start_period: 90s
      retries: 3

  broker:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 3000
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true

    volumes:
      - kafka-data:/var/lib/kafka/data
    ports:
      - "9092:9092"
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 15s
      timeout: 15s
      start_period: 90s
      retries: 3

networks:
  chat-service-network:
    driver: bridge

  user-service-network:
    driver: bridge

  matching-service-network:
    driver: bridge

  question-service-network:
    driver: bridge

  collaboration-service-network:
    driver: bridge

  history-service-network:
    driver: bridge

  api-network:
    driver: bridge

  kafka-network:
    driver: bridge

volumes:
  progresDB:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
